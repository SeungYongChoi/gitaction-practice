# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.
# # This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# name: Java CD with Gradle, Docker, Aws

# on:
#   push:
#     branches: [ "main" ]

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'temurin'
        
#     - name: make main properties
#       run: |
#         cd ./src/main/resources
#         touch ./application.properties
#         echo "${{ secrets.PROPERTIES }}" > ./application.properties
#       shell: bash    
      

#     - name: make main fcm json
#     - name: make test properties
#     - name: make test fcm json
    
#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       with:
#         arguments: build
        
#     - name: Docker build and push
#       run: |
#         docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PWD }}
#         docker build -t ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7} .
#         docker push ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7}
        
#     - name: SSH proxy command
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.DEV_SERVER_IP }}
#         username: ec2-user
#         key: ${{ secrets.PRIVATE_PEM_KEY }}
#         proxy_host: ${{ secrets.BASTION_IP }} 
#         proxy_username: ec2-user
#         proxy_key: ${{ secrets.PUBLIC_PEM_KEY }}
#         envs: GITHUB_SHA
#         script: |
#           docker pull ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7}
#           docker tag ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPOSITORY }}:${GITHUB_SHA::7} mongle-backend
#           docker stop mongle-backend
#           docker run -d --rm --name mongle-backend -p 8080:8080 mongle-backend

  
